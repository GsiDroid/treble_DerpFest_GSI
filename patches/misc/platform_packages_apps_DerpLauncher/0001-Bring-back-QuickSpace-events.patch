From 942cc8089ba576b1c1224da0eb41fe86f0b237b1 Mon Sep 17 00:00:00 2001
From: BoNic <BoNio9527@gmail.com>
Date: Sat, 2 Dec 2023 23:53:08 -0500
Subject: [PATCH] Bring-back-QuickSpace-events

---
 AndroidManifest-common.xml                    |   2 +
 privapp_whitelist_derp_launcher3.xml          |   1 +
 res/drawable/bg_quickspace.xml                |  17 +
 res/drawable/ic_music_note_24dp.xml           |  10 +
 res/drawable/ic_quickspace_evening.xml        |   8 +
 res/drawable/ic_quickspace_midnight.xml       |   7 +
 res/drawable/ic_quickspace_morning.xml        |   8 +
 res/layout/quickspace_alternate_double.xml    | 210 +++++++++
 res/layout/quickspace_doubleline.xml          | 124 +++++
 ...reserved_container_alternate_workspace.xml |  34 ++
 res/layout/reserved_container_workspace.xml   |  35 ++
 res/values/cr_styles.xml                      |  27 ++
 res/values/derp_config.xml                    |   3 +
 res/values/derp_strings.xml                   | 114 +++++
 res/values/dimens.xml                         |   4 +
 res/xml/launcher_preferences.xml              |  44 ++
 .../android/launcher3/AutoInstallsLayout.java |  21 -
 .../launcher3/DefaultLayoutParser.java        |   1 -
 src/com/android/launcher3/Launcher.java       |  36 +-
 src/com/android/launcher3/Utilities.java      |  46 ++
 src/com/android/launcher3/Workspace.java      |   8 +-
 .../launcher3/config/FeatureFlags.java        |   2 +-
 .../graphics/LauncherPreviewRenderer.java     |   4 +-
 .../android/launcher3/model/BgDataModel.java  |   2 +-
 .../launcher3/model/DatabaseHelper.java       |   2 +-
 .../model/GridSizeMigrationUtil.java          |  11 +-
 .../android/launcher3/model/LoaderCursor.java |   2 +-
 .../android/launcher3/model/LoaderTask.java   |  11 +-
 .../model/WorkspaceItemSpaceFinder.java       |   2 +-
 .../launcher3/qsb/QsbContainerView.java       |   2 +-
 .../quickspace/QuickEventsController.java     | 425 ++++++++++++++++++
 .../launcher3/quickspace/QuickSpaceView.java  | 296 ++++++++++++
 .../quickspace/QuickspaceController.java      | 295 ++++++++++++
 .../receivers/QuickSpaceActionReceiver.java   |  96 ++++
 .../quickspace/views/DateTextView.java        |  94 ++++
 .../views/DoubleShadowTextView.java           |  53 +++
 .../launcher3/settings/SettingsActivity.java  |  17 +
 37 files changed, 2014 insertions(+), 60 deletions(-)
 create mode 100644 res/drawable/bg_quickspace.xml
 create mode 100644 res/drawable/ic_music_note_24dp.xml
 create mode 100644 res/drawable/ic_quickspace_evening.xml
 create mode 100644 res/drawable/ic_quickspace_midnight.xml
 create mode 100644 res/drawable/ic_quickspace_morning.xml
 create mode 100644 res/layout/quickspace_alternate_double.xml
 create mode 100644 res/layout/quickspace_doubleline.xml
 create mode 100644 res/layout/reserved_container_alternate_workspace.xml
 create mode 100644 res/layout/reserved_container_workspace.xml
 create mode 100644 res/values/cr_styles.xml
 create mode 100644 src/com/android/launcher3/quickspace/QuickEventsController.java
 create mode 100644 src/com/android/launcher3/quickspace/QuickSpaceView.java
 create mode 100644 src/com/android/launcher3/quickspace/QuickspaceController.java
 create mode 100644 src/com/android/launcher3/quickspace/receivers/QuickSpaceActionReceiver.java
 create mode 100644 src/com/android/launcher3/quickspace/views/DateTextView.java
 create mode 100644 src/com/android/launcher3/quickspace/views/DoubleShadowTextView.java

diff --git a/AndroidManifest-common.xml b/AndroidManifest-common.xml
index bd410fd..c93a9fb 100644
--- a/AndroidManifest-common.xml
+++ b/AndroidManifest-common.xml
@@ -51,6 +51,8 @@

     <uses-permission android:name="android.permission.FORCE_STOP_PACKAGES" />
     <uses-permission android:name="android.permission.DEVICE_POWER" />
+    <uses-permission android:name="android.permission.MEDIA_CONTENT_CONTROL" />
+    <uses-permission android:name="org.omnirom.omnijaws.READ_WEATHER" />

     <permission android:name="com.google.android.apps.nexuslauncher.permission.QSB" android:protectionLevel="signatureOrSystem"/>
     <uses-permission android:name="com.google.android.apps.nexuslauncher.permission.QSB"/>
diff --git a/privapp_whitelist_derp_launcher3.xml b/privapp_whitelist_derp_launcher3.xml
index 241a841..085304a 100644
--- a/privapp_whitelist_derp_launcher3.xml
+++ b/privapp_whitelist_derp_launcher3.xml
@@ -8,6 +8,7 @@
     <!-- Additional permissions on top of privapp-permissions-platform.xml -->
     <privapp-permissions package="com.android.launcher3">
         <permission name="android.permission.FORCE_STOP_PACKAGES"/>
+        <permission name="android.permission.MEDIA_CONTENT_CONTROL"/>
     </privapp-permissions>

 </permissions>
diff --git a/res/drawable/bg_quickspace.xml b/res/drawable/bg_quickspace.xml
new file mode 100644
index 0000000..1f6bede
--- /dev/null
+++ b/res/drawable/bg_quickspace.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2018-2023 crDroid Android Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" />
\ No newline at end of file
diff --git a/res/drawable/ic_music_note_24dp.xml b/res/drawable/ic_music_note_24dp.xml
new file mode 100644
index 0000000..323633f
--- /dev/null
+++ b/res/drawable/ic_music_note_24dp.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM10,16.5v-9l6,4.5 -6,4.5z"/>
+</vector>
diff --git a/res/drawable/ic_quickspace_evening.xml b/res/drawable/ic_quickspace_evening.xml
new file mode 100644
index 0000000..2192cf4
--- /dev/null
+++ b/res/drawable/ic_quickspace_evening.xml
@@ -0,0 +1,8 @@
+<!-- drawable/moon_waning_crescent.xml -->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:width="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path android:fillColor="#fff" android:pathData="M2 12A10 10 0 0 0 15 21.54A10 10 0 0 1 15 2.46A10 10 0 0 0 2 12Z" />
+</vector>
\ No newline at end of file
diff --git a/res/drawable/ic_quickspace_midnight.xml b/res/drawable/ic_quickspace_midnight.xml
new file mode 100644
index 0000000..5b83510
--- /dev/null
+++ b/res/drawable/ic_quickspace_midnight.xml
@@ -0,0 +1,7 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:width="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path android:fillColor="#fff" android:pathData="M23,12H17V10L20.39,6H17V4H23V6L19.62,10H23V12M15,16H9V14L12.39,10H9V8H15V10L11.62,14H15V16M7,20H1V18L4.39,14H1V12H7V14L3.62,18H7V20Z" />
+</vector>
diff --git a/res/drawable/ic_quickspace_morning.xml b/res/drawable/ic_quickspace_morning.xml
new file mode 100644
index 0000000..b74fc67
--- /dev/null
+++ b/res/drawable/ic_quickspace_morning.xml
@@ -0,0 +1,8 @@
+<!-- drawable/white_balance_sunny.xml -->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:width="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path android:fillColor="#fff" android:pathData="M3.55,18.54L4.96,19.95L6.76,18.16L5.34,16.74M11,22.45C11.32,22.45 13,22.45 13,22.45V19.5H11M12,5.5A6,6 0 0,0 6,11.5A6,6 0 0,0 12,17.5A6,6 0 0,0 18,11.5C18,8.18 15.31,5.5 12,5.5M20,12.5H23V10.5H20M17.24,18.16L19.04,19.95L20.45,18.54L18.66,16.74M20.45,4.46L19.04,3.05L17.24,4.84L18.66,6.26M13,0.55H11V3.5H13M4,10.5H1V12.5H4M6.76,4.84L4.96,3.05L3.55,4.46L5.34,6.26L6.76,4.84Z" />
+</vector>
\ No newline at end of file
diff --git a/res/layout/quickspace_alternate_double.xml b/res/layout/quickspace_alternate_double.xml
new file mode 100644
index 0000000..8d9f4be
--- /dev/null
+++ b/res/layout/quickspace_alternate_double.xml
@@ -0,0 +1,210 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2020-2023 crDroid Android Project
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+          http://www.apache.org/licenses/LICENSE-2.0
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:launcher="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/quickspace_content"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="start|center_vertical"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_gravity="start|center_vertical"
+        android:gravity="start|center_vertical"
+        android:paddingStart="16dp"
+        android:paddingTop="8dp">
+
+        <com.android.launcher3.quickspace.views.DoubleShadowTextView
+            android:id="@+id/extended_greetings"
+            style="@style/QuickSpaceText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="start|center_vertical"
+            android:textColor="?workspaceAccentColor"
+            android:textSize="@dimen/quickspace_alternate_title_size"
+            android:visibility="gone"
+            android:paddingEnd="6dp"
+            launcher:ambientShadowBlur="3dp"
+            launcher:ambientShadowColor="?workspaceAmbientShadowColor"
+            launcher:keyShadowBlur="2dp"
+            launcher:keyShadowColor="?workspaceKeyShadowColor"
+            launcher:keyShadowOffsetX="0.5dip" />
+
+        <ImageView
+            android:id="@+id/now_playing_icon_sub"
+            android:layout_width="24dp"
+            android:layout_height="18dp"
+            android:visibility="gone"
+            android:src="@drawable/baseline_audiotrack_24"
+            android:tint="?workspaceAccentColor"
+            android:layout_gravity="start|center_vertical"
+            android:scaleType="fitXY"
+            android:layout_weight="0.0"
+            android:paddingEnd="6dp" />
+
+        <LinearLayout
+            android:id="@+id/quick_event_weather_content"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="start|center_vertical"
+            android:layout_weight="0.0"
+            android:clickable="true"
+            android:gravity="start|center_vertical"
+            android:orientation="horizontal">
+
+            <ImageView
+                android:id="@+id/quick_event_weather_icon"
+                android:layout_width="20dp"
+                android:layout_height="20dp"
+                android:layout_gravity="start|center_vertical"
+                android:scaleType="fitXY" />
+
+            <com.android.launcher3.quickspace.views.DoubleShadowTextView
+                android:id="@+id/quick_event_weather_temp"
+                style="@style/QuickSpaceText"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="start|center_vertical"
+                android:drawablePadding="8dp"
+                android:paddingStart="6dp"
+                android:textColor="?workspaceTextColor"
+                android:textSize="@dimen/quickspace_alternate_subtitle_size"
+                android:letterSpacing="0.01"
+                launcher:ambientShadowBlur="3dp"
+                launcher:ambientShadowColor="?workspaceAmbientShadowColor"
+                launcher:keyShadowBlur="2dp"
+                launcher:keyShadowColor="?workspaceKeyShadowColor"
+                launcher:keyShadowOffsetX="0.5dip" />
+
+        </LinearLayout>
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_gravity="start|center_vertical"
+        android:gravity="start|center_vertical"
+        android:paddingStart="16dp"
+        android:paddingTop="8dp">
+
+        <com.android.launcher3.quickspace.views.DoubleShadowTextView
+            android:id="@+id/extended_greetings_clock"
+            style="@style/QuickSpaceText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="start|center_vertical"
+            android:textColor="?workspaceAccentColor"
+            android:textSize="@dimen/quickspace_alternate_title_size"
+            android:paddingEnd="6dp"
+            android:visibility="gone"
+            launcher:ambientShadowBlur="3dp"
+            launcher:ambientShadowColor="?workspaceAmbientShadowColor"
+            launcher:keyShadowBlur="2dp"
+            launcher:keyShadowColor="?workspaceKeyShadowColor"
+            launcher:keyShadowOffsetX="0.5dip" />
+
+        <com.android.launcher3.quickspace.views.DoubleShadowTextView
+            android:id="@+id/quick_event_title"
+            style="@style/QuickSpaceText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="start|center_vertical"
+            android:singleLine="true"
+            android:scrollHorizontally="true"
+            android:focusable="true"
+            android:focusableInTouchMode="true"
+            android:textColor="?workspaceTextColor"
+            android:textSize="@dimen/quickspace_alternate_title_size"
+            launcher:ambientShadowBlur="3dp"
+            launcher:ambientShadowColor="?workspaceAmbientShadowColor"
+            launcher:keyShadowBlur="2dp"
+            launcher:keyShadowColor="?workspaceKeyShadowColor"
+            launcher:keyShadowOffsetX="0.5dip" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/subtitle_line"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="start|center_vertical"
+        android:layout_marginEnd="16dp"
+        android:orientation="horizontal"
+        android:paddingStart="16dp"
+        android:paddingTop="8dp">
+
+        <ImageView
+            android:id="@+id/quick_event_icon_sub"
+            android:layout_width="26dp"
+            android:layout_height="20dp"
+            android:layout_gravity="start|center_vertical"
+            android:scaleType="fitXY"
+            android:layout_weight="0.0"
+            android:paddingEnd="6dp" />
+
+        <com.android.launcher3.quickspace.views.DoubleShadowTextView
+            android:id="@+id/quick_event_title_sub_colored"
+            style="@style/QuickSpaceText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="start|center_vertical"
+            android:layout_weight="1.0"
+            android:drawablePadding="8dp"
+            android:visibility="gone"
+            android:includeFontPadding="false"
+            android:singleLine="true"
+            android:scrollHorizontally="true"
+            android:focusable="true"
+            android:focusableInTouchMode="true"
+            android:textColor="?workspaceAccentColor"
+            android:textSize="@dimen/quickspace_alternate_subtitle_size"
+            android:letterSpacing="0.01"
+            android:paddingEnd="6dp"
+            launcher:ambientShadowBlur="3dp"
+            launcher:ambientShadowColor="?workspaceAmbientShadowColor"
+            launcher:keyShadowBlur="2dp"
+            launcher:keyShadowColor="?workspaceKeyShadowColor"
+            launcher:keyShadowOffsetX="0.5dip" />
+
+        <com.android.launcher3.quickspace.views.DoubleShadowTextView
+            android:id="@+id/quick_event_title_sub"
+            style="@style/QuickSpaceSubText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="start|center_vertical"
+            android:layout_weight="1.0"
+            android:drawablePadding="8dp"
+            android:includeFontPadding="false"
+            android:singleLine="true"
+            android:scrollHorizontally="true"
+            android:focusable="true"
+            android:focusableInTouchMode="true"
+            android:textColor="?workspaceTextColor"
+            android:textSize="@dimen/quickspace_alternate_subtitle_size"
+            android:letterSpacing="0.01"
+            launcher:ambientShadowBlur="3dp"
+            launcher:ambientShadowColor="?workspaceAmbientShadowColor"
+            launcher:keyShadowBlur="2dp"
+            launcher:keyShadowColor="?workspaceKeyShadowColor"
+            launcher:keyShadowOffsetX="0.5dip" />
+
+    </LinearLayout>
+
+</LinearLayout>
diff --git a/res/layout/quickspace_doubleline.xml b/res/layout/quickspace_doubleline.xml
new file mode 100644
index 0000000..a9c73fb
--- /dev/null
+++ b/res/layout/quickspace_doubleline.xml
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2018 CypherOS
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+          http://www.apache.org/licenses/LICENSE-2.0
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:launcher="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/quickspace_content"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="start|center_vertical"
+    android:orientation="vertical">
+
+    <com.android.launcher3.quickspace.views.DoubleShadowTextView
+        android:id="@+id/quick_event_title"
+        style="@style/QuickSpaceText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="start|center_vertical"
+        android:paddingStart="16dp"
+        android:paddingTop="8dp"
+        android:singleLine="true"
+        android:scrollHorizontally="true"
+        android:focusable="true"
+        android:focusableInTouchMode="true"
+        android:textColor="?workspaceTextColor"
+        android:textSize="@dimen/quickspace_title_size"
+        launcher:ambientShadowBlur="3dp"
+        launcher:ambientShadowColor="?workspaceAmbientShadowColor"
+        launcher:keyShadowBlur="2dp"
+        launcher:keyShadowColor="?workspaceKeyShadowColor"
+        launcher:keyShadowOffsetX="0.5dip" />
+
+        <LinearLayout
+            android:id="@+id/quick_event_weather_content"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="start|center_vertical"
+            android:layout_weight="0.0"
+            android:background="@drawable/bg_quickspace"
+            android:clickable="true"
+            android:gravity="start|center_vertical"
+            android:orientation="horizontal"
+            android:paddingStart="16dp"
+            android:paddingTop="8dp">
+
+            <ImageView
+                android:id="@+id/quick_event_weather_icon"
+                android:layout_width="20dp"
+                android:layout_height="20dp"
+                android:layout_gravity="start|center_vertical"
+                android:scaleType="fitXY" />
+
+            <com.android.launcher3.quickspace.views.DoubleShadowTextView
+                android:id="@+id/quick_event_weather_temp"
+                style="@style/QuickSpaceSubText"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="start|center_vertical"
+                android:drawablePadding="8dp"
+                android:paddingStart="6dp"
+                android:textColor="?workspaceTextColor"
+                android:textSize="@dimen/quickspace_subtitle_size"
+                android:letterSpacing="0.01"
+                launcher:ambientShadowBlur="3dp"
+                launcher:ambientShadowColor="?workspaceAmbientShadowColor"
+                launcher:keyShadowBlur="2dp"
+                launcher:keyShadowColor="?workspaceKeyShadowColor"
+                launcher:keyShadowOffsetX="0.5dip" />
+        </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/subtitle_line"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="start|center_vertical"
+        android:layout_marginEnd="16dp"
+        android:orientation="horizontal"
+        android:paddingStart="16dp"
+        android:paddingTop="8dp">
+
+        <ImageView
+            android:id="@+id/quick_event_icon_sub"
+            android:layout_width="26dp"
+            android:layout_height="20dp"
+            android:layout_gravity="start|center_vertical"
+            android:scaleType="fitXY"
+            android:layout_weight="0.0"
+            android:paddingEnd="6dp" />
+
+        <com.android.launcher3.quickspace.views.DoubleShadowTextView
+            android:id="@+id/quick_event_title_sub"
+            style="@style/QuickSpaceSubText"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="start|center_vertical"
+            android:layout_weight="1.0"
+            android:drawablePadding="8dp"
+            android:includeFontPadding="false"
+            android:singleLine="true"
+            android:scrollHorizontally="true"
+            android:focusable="true"
+            android:focusableInTouchMode="true"
+            android:textColor="?workspaceTextColor"
+            android:textSize="@dimen/quickspace_subtitle_size"
+            android:letterSpacing="0.01"
+            launcher:ambientShadowBlur="3dp"
+            launcher:ambientShadowColor="?workspaceAmbientShadowColor"
+            launcher:keyShadowBlur="2dp"
+            launcher:keyShadowColor="?workspaceKeyShadowColor"
+            launcher:keyShadowOffsetX="0.5dip" />
+
+    </LinearLayout>
+
+</LinearLayout>
diff --git a/res/layout/reserved_container_alternate_workspace.xml b/res/layout/reserved_container_alternate_workspace.xml
new file mode 100644
index 0000000..d67157f
--- /dev/null
+++ b/res/layout/reserved_container_alternate_workspace.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2020-2023 crDroid Android Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.android.launcher3.quickspace.QuickSpaceView
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@id/reserved_container_workspace"
+        android:background="?android:selectableItemBackground"
+        android:clickable="false"
+        android:layout_width="fill_parent"
+        android:layout_height="0dp"
+        android:animateLayoutChanges="true">
+
+        <com.android.launcher3.BubbleTextView
+            android:id="@+id/dummyBubbleTextView"
+            android:visibility="invisible"
+            android:layout_width="0dp"
+            android:layout_height="36dp"
+            android:contentDescription="" />
+
+    <include layout="@layout/quickspace_alternate_double" />
+</com.android.launcher3.quickspace.QuickSpaceView>
diff --git a/res/layout/reserved_container_workspace.xml b/res/layout/reserved_container_workspace.xml
new file mode 100644
index 0000000..76efb13
--- /dev/null
+++ b/res/layout/reserved_container_workspace.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2018-2023 crDroid Android Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<com.android.launcher3.quickspace.QuickSpaceView
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@id/reserved_container_workspace"
+        android:background="?android:selectableItemBackground"
+        android:clickable="false"
+        android:layout_width="fill_parent"
+        android:layout_height="0dp"
+        android:animateLayoutChanges="true">
+
+        <com.android.launcher3.BubbleTextView
+            android:layout_gravity="center"
+            android:id="@+id/dummyBubbleTextView"
+            android:visibility="invisible"
+            android:layout_width="0dp"
+            android:layout_height="36dp"
+            android:contentDescription="" />
+
+    <include layout="@layout/quickspace_doubleline" />
+</com.android.launcher3.quickspace.QuickSpaceView>
diff --git a/res/values/cr_styles.xml b/res/values/cr_styles.xml
new file mode 100644
index 0000000..0bef3d5
--- /dev/null
+++ b/res/values/cr_styles.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2016-2023 crDroid Android Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+
+    <!-- QuickSpace -->
+    <style name="QuickSpaceText">
+        <item name="android:fontFamily">@*android:string/config_headlineFontFamily</item>
+    </style>
+
+    <style name="QuickSpaceSubText">
+        <item name="android:fontFamily">@*android:string/config_bodyFontFamily</item>
+    </style>
+</resources>
diff --git a/res/values/derp_config.xml b/res/values/derp_config.xml
index 7d0e1a5..06ab61c 100644
--- a/res/values/derp_config.xml
+++ b/res/values/derp_config.xml
@@ -10,4 +10,7 @@

     <!-- Icon pack -->
     <string name="icon_pack_settings_class" translatable="false">com.android.launcher3.icons.pack.IconPackSettingsFragment</string>
+
+    <!-- Quickspace -->
+    <item type="id" name="reserved_container_workspace" />
 </resources>
diff --git a/res/values/derp_strings.xml b/res/values/derp_strings.xml
index 1418fc6..79558b8 100644
--- a/res/values/derp_strings.xml
+++ b/res/values/derp_strings.xml
@@ -94,6 +94,120 @@
     <!-- All apps themed icons -->
     <string name="pref_allapps_themed_icons">Use themed icons in drawer</string>
     <string name="themed_icons_disabled_summary">Themed icons are turned off in Wallpaper &amp; style</string>
+    <string name="quickspace_category_title">Quickspace</string>
+    <!-- QuickSpace -->
+    <string name="show_quickspace_title">At A Glance</string>
+    <string name="show_quickspace_summary">Show at the top of your home screen</string>
+    <string name="quickspace_date_format" translatable="false">EEEE, MMM d</string>
+    <string name="quickspace_date_format_minimalistic" translatable="false">EEE, MMM d</string>
+
+    <!-- QuickSpace: QuickEvent: Device Intro Event -->
+    <string name="quick_event_rom_intro_welcome">Welcome to DerpFest!</string>
+    <string-array name="welcome_message_variants">
+        <item>Have a great day</item>
+        <item>Thank you for choosing us</item>
+        <item>Loving us? Send us a beer</item>
+        <item>Best Rom Ever.</item>
+        <item>Say hi to us on Telegram</item>
+        <item>Tap here to begin</item>
+        <item>We love you 3000</item>
+    </string-array>
+
+    <!-- QuickSpace: QuickEvent: Ambient Play -->
+    <string name="quick_event_ambient_now_playing">Now Playing</string>
+    <string name="quick_event_ambient_song_artist">%1$s by %2$s</string>
+
+    <!-- Quickspace Now Playing -->
+    <string name="quickspace_now_playing_title">Now playing</string>
+    <string name="quickspace_now_playing_summary">Show the song you\'re playing</string>
+
+    <!-- Quickspace alternative view -->
+    <string name="quickspace_alternate_style_title">Minimalistic style</string>
+    <string name="quickspace_alternate_style_summary">Switch to modern style</string>
+
+    <!-- Quickspace PSA - Custom messages for the glance -->
+    <string name="quickspace_psa_title">Random messages</string>
+    <string name="quickspace_psa_summary">Make your companion more lively with random messages</string>
+
+    <string-array name="quickspace_psa_morning">
+        <item>Good morning!</item>
+        <item>Good morning, time to rock!</item>
+        <item>What a beautiful day!</item>
+        <item>Have a nice day!</item>
+        <item>What about a small 5 minutes nap?</item>
+        <item>That\'s one way to wake up.</item>
+        <item>You should change your alarm sounds.</item>
+        <item>Looks like it\'s a beautiful day, isn\'t it?</item>
+        <item>Let\'s get this bread.</item>
+        <item>Check the weather just in case</item>
+        <item>Feeling a bit sleepy yet</item>
+        <item>Have you looked outside yet?</item>
+        <item>Let\'s get this done.</item>
+    </string-array>
+
+    <string-array name="quickspace_psa_evening">
+        <item>Good night!</item>
+        <item>Sleep well!</item>
+        <item>See you tomorrow!</item>
+        <item>Sweet dreams!</item>
+        <item>Don\'t stay up too long</item>
+        <item>Have a good sleep</item>
+        <item>Get some sleep</item>
+        <item>Time to relax</item>
+        <item>Enjoy the night!</item>
+        <item>Time to charge the batteries!</item>
+        <item>Tomorrow might be a great day</item>
+        <item>Get your bones ready for tomorrow</item>
+    </string-array>
+
+    <string-array name="quickspace_psa_midnight">
+        <item>Um... good night?</item>
+        <item>It\'s a bit late now</item>
+        <item>You should fix your sleep schedule</item>
+        <item>Are you more productive at this time?</item>
+    </string-array>
+
+    <string-array name="quickspace_psa_random">
+        <item>Ignorance is Bliss</item>
+        <item>Is it time to flash another update already?</item>
+        <item>Make peace, not war</item>
+        <item>Oh hey, what\'s up?</item>
+        <item>Focus on your tasks</item>
+        <item>How many screenshots do you take?</item>
+        <item>Open goodness with DerpFest</item>
+        <item>Spread love, not havoc</item>
+        <item>We didn\'t start the fire!</item>
+        <item>Time for some good music</item>
+        <item>\u003C\u003C\u003C\u003C\u003C\u003C\u003C HEAD</item>
+        <item>You need Derp Premium to see this</item>
+        <item>Remember the Lineage of the Unicorn</item>
+        <item>Enjoy Xtended battery life</item>
+        <item>Starting from the ground zero</item>
+        <item>We love you 3000</item>
+        <item>Delicious even without Sushi</item>
+        <item>Do something nice today</item>
+        <item>This is best Pixel Experience, isn\'t it?</item>
+        <item>How is everything going?</item>
+        <item>No illusions, welcome to reality!</item>
+        <item>Thank you for your support</item>
+        <item>No festival for Derps - only perfection!</item>
+        <item>One of the buildbot\'s best picks</item>
+        <item>Sanity for your Paranoia</item>
+        <item>Try Ice Cold desserts</item>
+        <item>What a lovely experience, isn\'t it?</item>
+        <item>Evolution is a myth, right?</item>
+        <item>You are what you flash, don\'t be Potato</item>
+        <item>What\'s on your mind?</item>
+        <item>Expecto Patronum</item>
+        <item>Wubba Lubba Dub Dub</item>
+        <item>Winner Winner ....?</item>
+        <item>rm -rf \/</item>
+    </string-array>
+
+    <!-- QuickSpace: QuickEvent: Weather -->
+    <string name="quick_event_ambient_weather_title">Weather condition</string>
+    <string name="quick_event_ambient_weather_summary">Display current weather condition and temperature</string>
+    <string name="quick_event_ambient_weather_enabled_info">Requires weather service to be enabled</string>

     <!-- Force monocrome icons -->
     <string name="pref_force_mono_icons_title">Force monochrome icons</string>
diff --git a/res/values/dimens.xml b/res/values/dimens.xml
index d221639..7396c32 100644
--- a/res/values/dimens.xml
+++ b/res/values/dimens.xml
@@ -453,4 +453,8 @@
     <!--  Folder spaces  -->
     <dimen name="folder_top_padding_default">24dp</dimen>
     <dimen name="folder_footer_horiz_padding">20dp</dimen>
+
+    <!-- QuickSpace -->
+    <dimen name="quickspace_title_size">24dp</dimen>
+    <dimen name="quickspace_alternate_title_size">22dp</dimen>
 </resources>
diff --git a/res/xml/launcher_preferences.xml b/res/xml/launcher_preferences.xml
index d5b781a..7e5dc4e 100644
--- a/res/xml/launcher_preferences.xml
+++ b/res/xml/launcher_preferences.xml
@@ -205,4 +205,48 @@

     </androidx.preference.PreferenceCategory>

+    <androidx.preference.PreferenceCategory
+        android:title="@string/quickspace_category_title">
+
+        <SwitchPreference
+            android:key="pref_show_quickspace"
+            android:title="@string/show_quickspace_title"
+            android:summary="@string/show_quickspace_summary"
+            android:defaultValue="true"
+            android:persistent="true"/>
+
+        <SwitchPreference
+            android:key="pref_show_alt_quickspace"
+            android:title="@string/quickspace_alternate_style_title"
+            android:summary="@string/quickspace_alternate_style_summary"
+            android:dependency="pref_show_quickspace"
+            android:defaultValue="false"
+            android:persistent="true"/>
+
+        <SwitchPreference
+            android:key="pref_quickspace_psonality"
+            android:title="@string/quickspace_psa_title"
+            android:summary="@string/quickspace_psa_summary"
+            android:dependency="pref_show_quickspace"
+            android:defaultValue="true"
+            android:persistent="true" />
+
+        <SwitchPreference
+            android:key="pref_quickspace_np"
+            android:title="@string/quickspace_now_playing_title"
+            android:summary="@string/quickspace_now_playing_summary"
+            android:dependency="pref_show_quickspace"
+            android:defaultValue="true"
+            android:persistent="true" />
+
+        <SwitchPreference
+            android:key="pref_quickspace_weather"
+            android:title="@string/quick_event_ambient_weather_title"
+            android:summary="@string/quick_event_ambient_weather_summary"
+            android:dependency="pref_show_quickspace"
+            android:defaultValue="true"
+            android:persistent="true" />
+
+    </androidx.preference.PreferenceCategory>
+
 </androidx.preference.PreferenceScreen>
diff --git a/src/com/android/launcher3/AutoInstallsLayout.java b/src/com/android/launcher3/AutoInstallsLayout.java
index ede7e2f..49626f7 100644
--- a/src/com/android/launcher3/AutoInstallsLayout.java
+++ b/src/com/android/launcher3/AutoInstallsLayout.java
@@ -50,7 +50,6 @@ import com.android.launcher3.model.data.AppInfo;
 import com.android.launcher3.model.data.LauncherAppWidgetInfo;
 import com.android.launcher3.model.data.WorkspaceItemInfo;
 import com.android.launcher3.pm.UserCache;
-import com.android.launcher3.qsb.QsbContainerView;
 import com.android.launcher3.shortcuts.ShortcutKey;
 import com.android.launcher3.uioverrides.ApiWrapper;
 import com.android.launcher3.util.IntArray;
@@ -128,7 +127,6 @@ public class AutoInstallsLayout {
     private static final String TAG_AUTO_INSTALL = "autoinstall";
     private static final String TAG_FOLDER = "folder";
     private static final String TAG_APPWIDGET = "appwidget";
-    protected static final String TAG_SEARCH_WIDGET = "searchwidget";
     private static final String TAG_SHORTCUT = "shortcut";
     private static final String TAG_EXTRA = "extra";

@@ -342,7 +340,6 @@ public class AutoInstallsLayout {
         parsers.put(TAG_AUTO_INSTALL, new AutoInstallParser());
         parsers.put(TAG_FOLDER, new FolderParser());
         parsers.put(TAG_APPWIDGET, new PendingWidgetParser());
-        parsers.put(TAG_SEARCH_WIDGET, new SearchWidgetParser());
         parsers.put(TAG_SHORTCUT, new ShortcutParser());
         return parsers;
     }
@@ -534,24 +531,6 @@ public class AutoInstallsLayout {
         }
     }

-    protected class SearchWidgetParser extends PendingWidgetParser {
-        @Override
-        @Nullable
-        @WorkerThread
-        public ComponentName getComponentName(XmlPullParser parser) {
-            return QsbContainerView.getSearchComponentName(mContext);
-        }
-
-        @Override
-        protected int verifyAndInsert(ComponentName cn, Bundle extras) {
-            mValues.put(Favorites.OPTIONS, LauncherAppWidgetInfo.OPTION_SEARCH_WIDGET);
-            int flags = mValues.getAsInteger(Favorites.RESTORED)
-                    | WorkspaceItemInfo.FLAG_RESTORE_STARTED;
-            mValues.put(Favorites.RESTORED, flags);
-            return super.verifyAndInsert(cn, extras);
-        }
-    }
-
     protected class FolderParser implements TagParser {
         private final ArrayMap<String, TagParser> mFolderElements;

diff --git a/src/com/android/launcher3/DefaultLayoutParser.java b/src/com/android/launcher3/DefaultLayoutParser.java
index c748693..1949c9a 100644
--- a/src/com/android/launcher3/DefaultLayoutParser.java
+++ b/src/com/android/launcher3/DefaultLayoutParser.java
@@ -70,7 +70,6 @@ public class DefaultLayoutParser extends AutoInstallsLayout {
         ArrayMap<String, TagParser> parsers = new ArrayMap<>();
         parsers.put(TAG_FAVORITE, new AppShortcutWithUriParser());
         parsers.put(TAG_APPWIDGET, new AppWidgetParser());
-        parsers.put(TAG_SEARCH_WIDGET, new SearchWidgetParser());
         parsers.put(TAG_SHORTCUT, new ShortcutParser());
         parsers.put(TAG_RESOLVE, new ResolveParser());
         parsers.put(TAG_FOLDER, new MyFolderParser());
diff --git a/src/com/android/launcher3/Launcher.java b/src/com/android/launcher3/Launcher.java
index 6d2432f..998c007 100644
--- a/src/com/android/launcher3/Launcher.java
+++ b/src/com/android/launcher3/Launcher.java
@@ -189,7 +189,7 @@ import com.android.launcher3.popup.ArrowPopup;
 import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.popup.PopupDataProvider;
 import com.android.launcher3.popup.SystemShortcut;
-import com.android.launcher3.qsb.QsbContainerView;
+import com.android.launcher3.quickspace.QuickSpaceView;
 import com.android.launcher3.statemanager.StateManager;
 import com.android.launcher3.statemanager.StateManager.StateHandler;
 import com.android.launcher3.statemanager.StatefulActivity;
@@ -426,6 +426,9 @@ public class Launcher extends StatefulActivity<LauncherState>
     private StartupLatencyLogger mStartupLatencyLogger;
     private CellPosMapper mCellPosMapper = CellPosMapper.DEFAULT;

+    // QuickSpace
+    private QuickSpaceView mQuickSpace;
+
     private boolean mSmartspaceEnabled;

     @Override
@@ -1075,6 +1078,9 @@ public class Launcher extends StatefulActivity<LauncherState>
         } else {
             mOverlayManager.onActivityStopped(this);
         }
+        if (mQuickSpace != null) {
+            mQuickSpace.onPause();
+        }
         hideKeyboard();
         logStopAndResume(false /* isResume */);
         mAppWidgetHolder.setActivityStarted(false);
@@ -1267,6 +1273,10 @@ public class Launcher extends StatefulActivity<LauncherState>
                 TraceHelper.FLAG_UI_EVENT);
         super.onResume();

+        if (mQuickSpace != null) {
+            mQuickSpace.onResume();
+        }
+
         if (mDeferOverlayCallbacks) {
             scheduleDeferredCheck();
         } else {
@@ -1292,6 +1302,9 @@ public class Launcher extends StatefulActivity<LauncherState>
         if (!mDeferOverlayCallbacks) {
             mOverlayManager.onActivityPaused(this);
         }
+        if (mQuickSpace != null) {
+            mQuickSpace.onPause();
+        }
         mAppWidgetHolder.setActivityResumed(false);
     }

@@ -1368,6 +1381,9 @@ public class Launcher extends StatefulActivity<LauncherState>
         // Setup Scrim
         mScrimView = findViewById(R.id.scrim_view);

+        // QuickSpace
+        mQuickSpace = findViewById(R.id.reserved_container_workspace);
+
         // Setup the drag controller (drop targets have to be added in reverse order in priority)
         mDropTargetBar.setup(mDragController);
         mAllAppsController.setupViews(mScrimView, mAppsView);
@@ -1816,6 +1832,10 @@ public class Launcher extends StatefulActivity<LauncherState>

         mOverlayManager.onActivityDestroyed(this);
         mUserChangedCallbackCloseable.close();
+
+        if (mQuickSpace != null) {
+            mQuickSpace.onPause();
+        }
     }

     public LauncherAccessibilityDelegate getAccessibilityDelegate() {
@@ -2336,11 +2356,11 @@ public class Launcher extends StatefulActivity<LauncherState>
     @Override
     public void bindScreens(IntArray orderedScreenIds) {
         int firstScreenPosition = 0;
-        if (mSmartspaceEnabled &&
+        if (Utilities.showQuickspace(this) &&
                 orderedScreenIds.indexOf(Workspace.FIRST_SCREEN_ID) != firstScreenPosition) {
             orderedScreenIds.removeValue(Workspace.FIRST_SCREEN_ID);
             orderedScreenIds.add(firstScreenPosition, Workspace.FIRST_SCREEN_ID);
-        } else if (!mSmartspaceEnabled && orderedScreenIds.isEmpty()) {
+        } else if (!Utilities.showQuickspace(this) && orderedScreenIds.isEmpty()) {
             // If there are no screens, we need to have an empty screen
             mWorkspace.addExtraEmptyScreens();
         }
@@ -2364,7 +2384,7 @@ public class Launcher extends StatefulActivity<LauncherState>
         int count = orderedScreenIds.size();
         for (int i = 0; i < count; i++) {
             int screenId = orderedScreenIds.get(i);
-            if (mSmartspaceEnabled && screenId == Workspace.FIRST_SCREEN_ID) {
+            if (Utilities.showQuickspace(this) && screenId == Workspace.FIRST_SCREEN_ID) {
                 // No need to bind the first screen, as its always bound.
                 continue;
             }
@@ -2569,14 +2589,6 @@ public class Launcher extends StatefulActivity<LauncherState>
     }

     private View inflateAppWidget(LauncherAppWidgetInfo item) {
-        if (item.hasOptionFlag(LauncherAppWidgetInfo.OPTION_SEARCH_WIDGET)) {
-            item.providerName = QsbContainerView.getSearchComponentName(this);
-            if (item.providerName == null) {
-                getModelWriter().deleteItemFromDatabase(item,
-                        "search widget removed because search component cannot be found");
-                return null;
-            }
-        }
         final AppWidgetHostView view;
         if (mIsSafeModeEnabled) {
             view = new PendingAppWidgetHostView(this, item, mIconCache, true);
diff --git a/src/com/android/launcher3/Utilities.java b/src/com/android/launcher3/Utilities.java
index 9554e22..1925cfa 100644
--- a/src/com/android/launcher3/Utilities.java
+++ b/src/com/android/launcher3/Utilities.java
@@ -47,6 +47,8 @@ import android.graphics.RectF;
 import android.graphics.drawable.AdaptiveIconDrawable;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
+import android.icu.text.DateFormat;
+import android.icu.text.DisplayContext;
 import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.os.DeadObjectException;
@@ -58,6 +60,7 @@ import android.provider.Settings;
 import android.text.Spannable;
 import android.text.SpannableString;
 import android.text.TextUtils;
+import android.text.format.DateUtils;
 import android.text.style.TtsSpan;
 import android.util.DisplayMetrics;
 import android.util.Log;
@@ -175,6 +178,11 @@ public final class Utilities {
     public static final String KEY_ICON_PACK = "pref_icon_pack";
     public static final String KEY_RECENTS_OPACITY = "pref_recents_opacity";
     public static final String KEY_APP_DRAWER_OPACITY = "pref_app_drawer_opacity";
+    public static final String DESKTOP_SHOW_QUICKSPACE = "pref_show_quickspace";
+    public static final String KEY_SHOW_ALT_QUICKSPACE = "pref_show_alt_quickspace";
+    public static final String KEY_SHOW_QUICKSPACE_PSONALITY = "pref_quickspace_psonality";
+    public static final String KEY_SHOW_QUICKSPACE_NOWPLAYING = "pref_quickspace_np";
+    public static final String KEY_SHOW_QUICKSPACE_WEATHER = "pref_quickspace_weather";

     /**
      * Returns true if theme is dark.
@@ -835,6 +843,19 @@ public final class Utilities {
         return prefs.getBoolean(KEY_DT_GESTURE, true);
     }

+    public static String formatDateTime(Context context) {
+        String styleText;
+        DateFormat dateFormat;
+        if (useAlternativeQuickspaceUI(context)) {
+            styleText = context.getString(R.string.quickspace_date_format_minimalistic);
+        } else {
+            styleText = context.getString(R.string.quickspace_date_format);
+        }
+        dateFormat = DateFormat.getInstanceForSkeleton(styleText, Locale.getDefault());
+        dateFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE);
+        return dateFormat.format(System.currentTimeMillis());
+    }
+
     public static boolean isWorkspaceEditAllowed(Context context) {
         SharedPreferences prefs = LauncherPrefs.getPrefs(context.getApplicationContext());
         return !prefs.getBoolean(InvariantDeviceProfile.KEY_WORKSPACE_LOCK, false);
@@ -893,4 +914,29 @@ public final class Utilities {
         SharedPreferences prefs = LauncherPrefs.getPrefs(context.getApplicationContext());
         return prefs.getInt(KEY_APP_DRAWER_OPACITY, 100);
     }
+
+    public static boolean showQuickspace(Context context) {
+        SharedPreferences prefs = LauncherPrefs.getPrefs(context.getApplicationContext());
+        return prefs.getBoolean(DESKTOP_SHOW_QUICKSPACE, true);
+    }
+
+    public static boolean useAlternativeQuickspaceUI(Context context) {
+        SharedPreferences prefs = LauncherPrefs.getPrefs(context.getApplicationContext());
+        return prefs.getBoolean(KEY_SHOW_ALT_QUICKSPACE, false);
+    }
+
+    public static boolean isQuickspacePersonalityEnabled(Context context) {
+        SharedPreferences prefs = LauncherPrefs.getPrefs(context.getApplicationContext());
+        return prefs.getBoolean(KEY_SHOW_QUICKSPACE_PSONALITY, true);
+    }
+
+    public static boolean isQuickspaceNowPlaying(Context context) {
+        SharedPreferences prefs = LauncherPrefs.getPrefs(context.getApplicationContext());
+        return prefs.getBoolean(KEY_SHOW_QUICKSPACE_NOWPLAYING, true);
+    }
+
+    public static boolean isQuickspaceWeather(Context context) {
+        SharedPreferences prefs = LauncherPrefs.getPrefs(context.getApplicationContext());
+        return prefs.getBoolean(KEY_SHOW_QUICKSPACE_WEATHER, true);
+    }
 }
diff --git a/src/com/android/launcher3/Workspace.java b/src/com/android/launcher3/Workspace.java
index 6f56295..9b314d4 100644
--- a/src/com/android/launcher3/Workspace.java
+++ b/src/com/android/launcher3/Workspace.java
@@ -594,7 +594,7 @@ public class Workspace<T extends View & PageIndicator> extends PagedView<T>
      * Initializes and binds the first page
      */
     public void bindAndInitFirstWorkspaceScreen() {
-        if (!Utilities.showSmartspace(getContext())) {
+        if (!Utilities.showQuickspace(getContext())) {
             return;
         }

@@ -606,14 +606,14 @@ public class Workspace<T extends View & PageIndicator> extends PagedView<T>
             // As workspace does not touch the edges, we do not need a full
             // width first page pinned widget.
             mFirstPagePinnedItem = LayoutInflater.from(getContext())
-                    .inflate(R.layout.search_container_workspace, firstPage, false);
+                    .inflate(R.layout.reserved_container_workspace, firstPage, false);
         }

         int cellHSpan = mLauncher.getDeviceProfile().inv.numSearchContainerColumns;
         CellLayoutLayoutParams lp = new CellLayoutLayoutParams(0, 0, cellHSpan, 1);
         lp.canReorder = false;
         if (!firstPage.addViewToCellLayout(
-                mFirstPagePinnedItem, 0, R.id.search_container_workspace, lp, true)) {
+                mFirstPagePinnedItem, 0, R.id.reserved_container_workspace, lp, true)) {
             Log.e(TAG, "Failed to add to item at (0, 0) to CellLayout");
             mFirstPagePinnedItem = null;
         }
@@ -1005,7 +1005,7 @@ public class Workspace<T extends View & PageIndicator> extends PagedView<T>
             int id = mWorkspaceScreens.keyAt(i);
             CellLayout cl = mWorkspaceScreens.valueAt(i);
             // FIRST_SCREEN_ID can never be removed.
-            if ((!Utilities.showSmartspace(getContext()) || id > FIRST_SCREEN_ID)
+            if ((!Utilities.showQuickspace(getContext()) || id > FIRST_SCREEN_ID)
                     && cl.getShortcutsAndWidgets().getChildCount() == 0) {
                 removeScreens.add(id);
             }
diff --git a/src/com/android/launcher3/config/FeatureFlags.java b/src/com/android/launcher3/config/FeatureFlags.java
index b9ebafb..c1778e1 100644
--- a/src/com/android/launcher3/config/FeatureFlags.java
+++ b/src/com/android/launcher3/config/FeatureFlags.java
@@ -69,7 +69,7 @@ public final class FeatureFlags {
      * @deprecated Use {@link BuildConfig#QSB_ON_FIRST_SCREEN} directly
      */
     @Deprecated
-    public static final boolean QSB_ON_FIRST_SCREEN = BuildConfig.QSB_ON_FIRST_SCREEN;
+    public static final boolean USE_QUICKSPACE_VIEW = true;

     /**
      * Feature flag to handle define config changes dynamically instead of killing the process.
diff --git a/src/com/android/launcher3/graphics/LauncherPreviewRenderer.java b/src/com/android/launcher3/graphics/LauncherPreviewRenderer.java
index b96ba86..73a1c97 100644
--- a/src/com/android/launcher3/graphics/LauncherPreviewRenderer.java
+++ b/src/com/android/launcher3/graphics/LauncherPreviewRenderer.java
@@ -530,13 +530,13 @@ public class LauncherPreviewRenderer extends ContextWrapper
         }

         // Add first page QSB
-        if (Utilities.showSmartspace(mContext)) {
+        if (FeatureFlags.USE_QUICKSPACE_VIEW) {
             CellLayout firstScreen = mWorkspaceScreens.get(FIRST_SCREEN_ID);
             View qsb = mHomeElementInflater.inflate(R.layout.qsb_preview, firstScreen, false);
             CellLayoutLayoutParams lp = new CellLayoutLayoutParams(
                     0, 0, firstScreen.getCountX(), 1);
             lp.canReorder = false;
-            firstScreen.addViewToCellLayout(qsb, 0, R.id.search_container_workspace, lp, true);
+            firstScreen.addViewToCellLayout(qsb, 0, R.id.reserved_container_workspace, lp, true);
         }

         measureView(mRootView, mDp.widthPx, mDp.heightPx);
diff --git a/src/com/android/launcher3/model/BgDataModel.java b/src/com/android/launcher3/model/BgDataModel.java
index 1d7164c..217e1ac 100644
--- a/src/com/android/launcher3/model/BgDataModel.java
+++ b/src/com/android/launcher3/model/BgDataModel.java
@@ -148,7 +148,7 @@ public class BgDataModel {
                 screenSet.add(item.screenId);
             }
         }
-        if (Utilities.showSmartspace(context) || screenSet.isEmpty()) {
+        if (FeatureFlags.USE_QUICKSPACE_VIEW || screenSet.isEmpty()) {
             screenSet.add(Workspace.FIRST_SCREEN_ID);
         }
         return screenSet.getArray();
diff --git a/src/com/android/launcher3/model/DatabaseHelper.java b/src/com/android/launcher3/model/DatabaseHelper.java
index 8aef47c..160dc44 100644
--- a/src/com/android/launcher3/model/DatabaseHelper.java
+++ b/src/com/android/launcher3/model/DatabaseHelper.java
@@ -256,7 +256,7 @@ public class DatabaseHelper extends NoLocaleSQLiteHelper implements
                         Favorites.SCREEN, IntArray.wrap(-777, -778)), null);
             }
             case 30: {
-                if (isQsbOnFirstScreen()) {
+                if (Utilities.showQuickspace(mContext)) {
                     // Clean up first row in screen 0 as it might contain junk data.
                     Log.d(TAG, "Cleaning up first row");
                     db.delete(Favorites.TABLE_NAME,
diff --git a/src/com/android/launcher3/model/GridSizeMigrationUtil.java b/src/com/android/launcher3/model/GridSizeMigrationUtil.java
index 1b3981d..404e588 100644
--- a/src/com/android/launcher3/model/GridSizeMigrationUtil.java
+++ b/src/com/android/launcher3/model/GridSizeMigrationUtil.java
@@ -120,7 +120,7 @@ public class GridSizeMigrationUtil {
             DbReader destReader = new DbReader(t.getDb(), TABLE_NAME, context, validPackages);

             Point targetSize = new Point(destDeviceState.getColumns(), destDeviceState.getRows());
-            migrate(target, srcReader, destReader, destDeviceState.getNumHotseat(),
+            migrate(context, target, srcReader, destReader, destDeviceState.getNumHotseat(),
                     targetSize, srcDeviceState, destDeviceState);
             dropTable(t.getDb(), TMP_TABLE);
             t.commit();
@@ -141,6 +141,7 @@ public class GridSizeMigrationUtil {
     }

     public static boolean migrate(
+            @NonNull Context context,
             @NonNull DatabaseHelper helper,
             @NonNull final DbReader srcReader, @NonNull final DbReader destReader,
             final int destHotseatSize, @NonNull final Point targetSize,
@@ -214,7 +215,7 @@ public class GridSizeMigrationUtil {
             if (DEBUG) {
                 Log.d(TAG, "Migrating " + screenId);
             }
-            solveGridPlacement(helper, srcReader,
+            solveGridPlacement(context, helper, srcReader,
                     destReader, screenId, trgX, trgY, workspaceToBeAdded, false);
             if (workspaceToBeAdded.isEmpty()) {
                 break;
@@ -225,7 +226,7 @@ public class GridSizeMigrationUtil {
         // any of the screens, in this case we add them to new screens until all of them are placed.
         int screenId = destReader.mLastScreenId + 1;
         while (!workspaceToBeAdded.isEmpty()) {
-            solveGridPlacement(helper, srcReader,
+            solveGridPlacement(context, helper, srcReader,
                     destReader, screenId, trgX, trgY, workspaceToBeAdded, preservePages);
             screenId++;
         }
@@ -324,13 +325,13 @@ public class GridSizeMigrationUtil {
         return validPackages;
     }

-    private static void solveGridPlacement(@NonNull final DatabaseHelper helper,
+    private static void solveGridPlacement(@NonNull Context context, @NonNull final DatabaseHelper helper,
             @NonNull final DbReader srcReader, @NonNull final DbReader destReader,
             final int screenId, final int trgX, final int trgY,
             @NonNull final List<DbEntry> sortedItemsToPlace, final boolean matchingScreenIdOnly) {
         final GridOccupancy occupied = new GridOccupancy(trgX, trgY);
         final Point trg = new Point(trgX, trgY);
-        final Point next = new Point(0, screenId == 0 && helper.isQsbOnFirstScreen()
+        final Point next = new Point(0, screenId == 0 && Utilities.showQuickspace(context)
                 ? 1 /* smartspace */ : 0);
         List<DbEntry> existedEntries = destReader.mWorkspaceEntriesByScreenId.get(screenId);
         if (existedEntries != null) {
diff --git a/src/com/android/launcher3/model/LoaderCursor.java b/src/com/android/launcher3/model/LoaderCursor.java
index f7fae2b..b62f6de 100644
--- a/src/com/android/launcher3/model/LoaderCursor.java
+++ b/src/com/android/launcher3/model/LoaderCursor.java
@@ -531,7 +531,7 @@ public class LoaderCursor extends CursorWrapper {

         if (!mOccupied.containsKey(item.screenId)) {
             GridOccupancy screen = new GridOccupancy(countX + 1, countY + 1);
-            if (item.screenId == Workspace.FIRST_SCREEN_ID && Utilities.showSmartspace(mContext)) {
+            if (item.screenId == Workspace.FIRST_SCREEN_ID && Utilities.showQuickspace(mContext)) {
                 // Mark the first X columns (X is width of the search container) in the first row as
                 // occupied (if the feature is enabled) in order to account for the search
                 // container.
diff --git a/src/com/android/launcher3/model/LoaderTask.java b/src/com/android/launcher3/model/LoaderTask.java
index 930ef6d..0a6fdeb 100644
--- a/src/com/android/launcher3/model/LoaderTask.java
+++ b/src/com/android/launcher3/model/LoaderTask.java
@@ -737,15 +737,8 @@ public class LoaderTask implements Runnable {
                     String savedProvider = c.getAppWidgetProvider();
                     final ComponentName component;

-                    if ((c.getOptions() & LauncherAppWidgetInfo.OPTION_SEARCH_WIDGET) != 0) {
-                        component  = QsbContainerView.getSearchComponentName(mApp.getContext());
-                        if (component == null) {
-                            c.markDeleted("Discarding SearchWidget without packagename ");
-                            return;
-                        }
-                    } else {
-                        component = ComponentName.unflattenFromString(savedProvider);
-                    }
+                    component = ComponentName.unflattenFromString(savedProvider);
+
                     final boolean isIdValid =
                             !c.hasRestoreFlag(LauncherAppWidgetInfo.FLAG_ID_NOT_VALID);
                     final boolean wasProviderReady =
diff --git a/src/com/android/launcher3/model/WorkspaceItemSpaceFinder.java b/src/com/android/launcher3/model/WorkspaceItemSpaceFinder.java
index 3f36d11..c92923a 100644
--- a/src/com/android/launcher3/model/WorkspaceItemSpaceFinder.java
+++ b/src/com/android/launcher3/model/WorkspaceItemSpaceFinder.java
@@ -67,7 +67,7 @@ public class WorkspaceItemSpaceFinder {
         int screenCount = workspaceScreens.size();
         // First check the preferred screen.
         IntSet screensToExclude = new IntSet();
-        if (Utilities.showSmartspace(app.getContext())) {
+        if (Utilities.showQuickspace(app.getContext())) {
             screensToExclude.add(FIRST_SCREEN_ID);
         }

diff --git a/src/com/android/launcher3/qsb/QsbContainerView.java b/src/com/android/launcher3/qsb/QsbContainerView.java
index 26df25b..bdf63ac 100644
--- a/src/com/android/launcher3/qsb/QsbContainerView.java
+++ b/src/com/android/launcher3/qsb/QsbContainerView.java
@@ -289,7 +289,7 @@ public class QsbContainerView extends FrameLayout {
         }

         public boolean isQsbEnabled() {
-            return Utilities.showSmartspace(getContext());
+            return false;
         }

         protected Bundle createBindOptions() {
diff --git a/src/com/android/launcher3/quickspace/QuickEventsController.java b/src/com/android/launcher3/quickspace/QuickEventsController.java
new file mode 100644
index 0000000..42a1f4d
--- /dev/null
+++ b/src/com/android/launcher3/quickspace/QuickEventsController.java
@@ -0,0 +1,425 @@
+/*
+ * Copyright (C) 2018 CypherOS
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.launcher3.quickspace;
+
+import android.app.PendingIntent;
+import android.content.ActivityNotFoundException;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.BroadcastReceiver;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.content.SharedPreferences;
+import android.media.MediaMetadata;
+import android.media.session.MediaController;
+import android.media.session.MediaSession;
+import android.media.session.MediaSessionManager;
+import android.net.Uri;
+import android.provider.AlarmClock;
+import android.provider.Settings;
+import android.text.TextUtils;
+import android.widget.Toast;
+import android.view.View;
+import android.view.View.OnClickListener;
+
+import com.android.launcher3.Launcher;
+import com.android.launcher3.LauncherFiles;
+import com.android.launcher3.R;
+import com.android.launcher3.Utilities;
+
+import java.util.Calendar;
+import java.util.Random;
+
+import java.util.List;
+
+public class QuickEventsController {
+
+    private static final String SETTING_DEVICE_INTRO_COMPLETED = "device_introduction_completed";
+    private Context mContext;
+
+    private String mEventTitle;
+    private String mEventTitleSub;
+    private String mGreetings;
+    private String mClockExt;
+    private OnClickListener mEventTitleSubAction = null;
+    private int mEventSubIcon = 0;
+
+    private boolean mIsQuickEvent = false;
+    private boolean mRunning = true;
+    private boolean mRegistered = false;
+
+    // Device Intro
+    private boolean mIsFirstTimeDone = false;
+    private SharedPreferences mPreferences;
+
+    // PSA + Personality
+    private String[] mPSAMorningStr;
+    private String[] mPSAEvenStr;
+    private String[] mPSAAfterNoonStr;
+    private String[] mPSAMidniteStr;
+    private String[] mPSARandomStr;
+    private String[] mPSAEarlyEvenStr;
+    private String[] mWelcomeStr;
+    private BroadcastReceiver mPSAListener = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            psonalityEvent();
+        }
+    };
+
+    // NowPlaying
+    private boolean mEventNowPlaying = false;
+    private String mNowPlayingTitle;
+    private String mNowPlayingArtist;
+    private boolean mClientLost = true;
+    private boolean mPlayingActive = false;
+
+    public QuickEventsController(Context context) {
+        mContext = context;
+        initQuickEvents();
+    }
+
+    public void initQuickEvents() {
+        mPreferences = mContext.getSharedPreferences(LauncherFiles.SHARED_PREFERENCES_KEY, Context.MODE_PRIVATE);
+        mIsFirstTimeDone = mPreferences.getBoolean(SETTING_DEVICE_INTRO_COMPLETED, false);
+        registerPSAListener();
+        updateQuickEvents();
+    }
+
+    private void registerPSAListener() {
+        if (mRegistered) return;
+        mRegistered = true;
+        IntentFilter psonalityIntent = new IntentFilter();
+        psonalityIntent.addAction(Intent.ACTION_TIME_TICK);
+        psonalityIntent.addAction(Intent.ACTION_TIME_CHANGED);
+        psonalityIntent.addAction(Intent.ACTION_TIMEZONE_CHANGED);
+        mContext.registerReceiver(mPSAListener, psonalityIntent, Context.RECEIVER_NOT_EXPORTED);
+    }
+
+    private void unregisterPSAListener() {
+        if (!mRegistered) return;
+        mRegistered = false;
+        mContext.unregisterReceiver(mPSAListener);
+    }
+
+    public void updateQuickEvents() {
+        deviceIntroEvent();
+        nowPlayingEvent();
+        initNowPlayingEvent();
+        psonalityEvent();
+    }
+
+    private void deviceIntroEvent() {
+        if (!mRunning) return;
+
+        if (mIsFirstTimeDone) return;
+
+        mIsQuickEvent = true;
+
+        if (Utilities.useAlternativeQuickspaceUI(mContext)) {
+            mEventTitle = mContext.getResources().getString(R.string.quick_event_rom_intro_welcome_ext);
+        } else {
+            mEventTitle = mContext.getResources().getString(R.string.quick_event_rom_intro_welcome);
+        }
+        mWelcomeStr = mContext.getResources().getStringArray(R.array.welcome_message_variants);
+        mEventTitleSub = mWelcomeStr[getLuckyNumber(0,mWelcomeStr.length - 1)];
+        mGreetings = mContext.getResources().getString(R.string.quickspace_grt_general);
+        mClockExt = mContext.getResources().getString(R.string.quickspace_ext_three);
+
+        mEventTitleSubAction = new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                mContext.getSharedPreferences(LauncherFiles.SHARED_PREFERENCES_KEY, Context.MODE_PRIVATE)
+                        .edit()
+                        .putBoolean(SETTING_DEVICE_INTRO_COMPLETED, true)
+                        .commit();
+                Intent intent = new Intent(Intent.ACTION_MAIN);
+                intent.addCategory(Intent.CATEGORY_HOME);
+                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
+                try {
+                    Launcher.getLauncher(mContext).startActivitySafely(view, intent, null);
+                } catch (ActivityNotFoundException ex) {
+                }
+                mIsQuickEvent = false;
+            }
+        };
+    }
+
+    public void nowPlayingEvent() {
+        if (mEventNowPlaying) {
+            boolean infoExpired = !mPlayingActive || mClientLost;
+            if (infoExpired) {
+                mIsQuickEvent = false;
+                mEventNowPlaying = false;
+            }
+        }
+    }
+
+    public void initNowPlayingEvent() {
+        if (!mRunning) return;
+
+        if (!mIsFirstTimeDone) return;
+
+        if (!Utilities.isQuickspaceNowPlaying(mContext)) return;
+
+        if (!mPlayingActive) return;
+
+        if (mNowPlayingTitle == null) return;
+
+        mEventTitle = mNowPlayingTitle;
+        mGreetings = mContext.getResources().getString(R.string.qe_now_playing_ext_one);
+        mClockExt = mContext.getResources().getString(R.string.qe_now_playing_ext_two);
+        if (mNowPlayingArtist == null ) {
+            mEventTitleSub = mContext.getResources().getString(R.string.qe_now_playing_unknown_artist);
+        } else {
+            mEventTitleSub = mNowPlayingArtist;
+        }
+        mEventSubIcon = R.drawable.ic_music_note_24dp;
+        mIsQuickEvent = true;
+        mEventNowPlaying = true;
+
+        mEventTitleSubAction = new View.OnClickListener() {
+	        @Override
+	        public void onClick(View view) {
+		    if (mPlayingActive) {
+		        MediaSessionManager mediaSessionManager = (MediaSessionManager) mContext.getSystemService(Context.MEDIA_SESSION_SERVICE);
+		        List<MediaController> sessions = mediaSessionManager.getActiveSessions(null);
+
+		        if (sessions != null && !sessions.isEmpty()) {
+		            MediaController mediaController = sessions.get(0);
+		            MediaSession.Token token = mediaController.getSessionToken();
+		            PendingIntent sessionActivity = mediaController.getSessionActivity();
+
+		            if (sessionActivity != null) {
+		                Intent intent = sessionActivity.getIntent();
+
+		                if (intent != null) {
+		                    ComponentName componentName = intent.getComponent();
+		                    if (componentName != null) {
+		                        String packageName = componentName.getPackageName();
+		                        if (packageName != null) {
+		                            Intent launchIntent = mContext.getPackageManager().getLaunchIntentForPackage(packageName);
+
+		                            if (launchIntent != null) {
+		                                launchIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+		                                try {
+		                                    // try if package name launch intent works
+		                                    mContext.startActivity(launchIntent);
+		                                    return; // Exit the method after starting the activity
+		                                } catch (Exception e) {}
+		                            }
+		                        }
+		                    }
+
+		                    try {
+		                        // try session activity
+		                        mContext.startActivity(intent);
+		                        return; // Exit the method after starting the activity
+		                    } catch (Exception e) {}
+		                }
+		            }
+
+		            // last resort: Work required for local media actions
+		            Intent npIntent = new Intent(Intent.ACTION_MAIN);
+		            npIntent.addCategory(Intent.CATEGORY_APP_MUSIC);
+		            npIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+		            try {
+		                Launcher.getLauncher(mContext).startActivitySafely(view, npIntent, null);
+		            } catch (ActivityNotFoundException ex) {}
+		        }
+		    }
+	        }
+	    };
+    }
+
+    public void psonalityEvent() {
+        if (!mIsFirstTimeDone || mEventNowPlaying) return;
+
+	mEventTitle = Utilities.formatDateTime(mContext);
+        mPSAMorningStr = mContext.getResources().getStringArray(R.array.quickspace_psa_morning);
+        mPSAEvenStr = mContext.getResources().getStringArray(R.array.quickspace_psa_evening);
+        mPSAEarlyEvenStr = mContext.getResources().getStringArray(R.array.quickspace_psa_early_evening);
+        mPSAMidniteStr = mContext.getResources().getStringArray(R.array.quickspace_psa_midnight);
+        mPSAAfterNoonStr = mContext.getResources().getStringArray(R.array.quickspace_psa_noon);
+        mPSARandomStr = mContext.getResources().getStringArray(R.array.quickspace_psa_random);
+        int psaLength;
+
+        mEventTitleSubAction = new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Intent calendarIntent = new Intent(Intent.ACTION_MAIN);
+                calendarIntent.addCategory(Intent.CATEGORY_APP_CALENDAR);
+
+                Intent clockIntent = new Intent(AlarmClock.ACTION_SHOW_ALARMS);
+
+                PackageManager packageManager = mContext.getPackageManager();
+                List<ResolveInfo> calendarApps = packageManager.queryIntentActivities(calendarIntent, PackageManager.MATCH_DEFAULT_ONLY);
+                List<ResolveInfo> clockApps = packageManager.queryIntentActivities(clockIntent, PackageManager.MATCH_DEFAULT_ONLY);
+
+                if (!calendarApps.isEmpty()) {
+                    calendarIntent.setPackage(calendarApps.get(0).activityInfo.packageName);
+                    try {
+                        mContext.startActivity(calendarIntent);
+                    } catch (ActivityNotFoundException e) {
+                    }
+                } else if (!clockApps.isEmpty()) {
+                    clockIntent.setPackage(clockApps.get(0).activityInfo.packageName);
+                    try {
+                        mContext.startActivity(clockIntent);
+                    } catch (ActivityNotFoundException e) {
+                    }
+                } else {
+                    Toast.makeText(mContext, R.string.intent_no_app_clock_found, Toast.LENGTH_SHORT).show();
+                }
+            }
+        };
+
+        int hourOfDay = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
+
+        if (hourOfDay >= 5 && hourOfDay <= 9) {
+            mGreetings = mContext.getResources().getString(R.string.quickspace_grt_morning);
+            mClockExt = mContext.getResources().getString(R.string.quickspace_ext_one);
+        } else if (hourOfDay >= 12 && hourOfDay <= 15) {
+            mGreetings = mContext.getResources().getString(R.string.quickspace_grt_afternoon);
+            mClockExt = mContext.getResources().getString(R.string.quickspace_ext_two);
+        } else if (hourOfDay >= 16 && hourOfDay <= 20) {
+            mGreetings = mContext.getResources().getString(R.string.quickspace_grt_evening);
+            mClockExt = mContext.getResources().getString(R.string.quickspace_ext_two);
+        } else if (hourOfDay >= 21 && hourOfDay <= 23) {
+            mGreetings = mContext.getResources().getString(R.string.quickspace_grt_night);
+            mClockExt = mContext.getResources().getString(R.string.quickspace_ext_three);
+        } else if (hourOfDay >= 0 && hourOfDay <= 3) {
+            mGreetings = mContext.getResources().getString(R.string.quickspace_grt_midnight);
+            mClockExt = mContext.getResources().getString(R.string.quickspace_ext_two);
+        } else {
+            mGreetings = mContext.getResources().getString(R.string.quickspace_grt_general);
+            mClockExt = mContext.getResources().getString(R.string.quickspace_ext_two);
+        }
+
+        if (getLuckyNumber(13) <= 7) {
+            mIsQuickEvent = false;
+            return;
+        } else if (getLuckyNumber(13) == 7) {
+            psaLength = mPSARandomStr.length - 1;
+            mEventTitleSub = mPSARandomStr[getLuckyNumber(0, psaLength)];
+            mIsQuickEvent = true;
+            return;
+        }
+
+        mEventSubIcon = 0;
+
+        switch (hourOfDay) {
+            case 5: case 6: case 7: case 8: case 9:
+                psaLength = mPSAMorningStr.length - 1;
+                mEventTitleSub = mPSAMorningStr[getLuckyNumber(0, psaLength)];
+                mIsQuickEvent = true;
+                break;
+
+            case 19: case 20: case 21:
+                psaLength = mPSAEvenStr.length - 1;
+                mEventTitleSub = mPSAEvenStr[getLuckyNumber(0, psaLength)];
+                mIsQuickEvent = true;
+                break;
+
+            case 16: case 17: case 18:
+                psaLength = mPSAEarlyEvenStr.length - 1;
+                mEventTitleSub = mPSAEarlyEvenStr[getLuckyNumber(0, psaLength)];
+                mIsQuickEvent = true;
+                break;
+
+            case 12: case 13: case 14: case 15:
+                psaLength = mPSAAfterNoonStr.length - 1;
+                mEventTitleSub = mPSAAfterNoonStr[getLuckyNumber(0, psaLength)];
+                mIsQuickEvent = true;
+                break;
+
+            case 0: case 1: case 2: case 3:
+                psaLength = mPSAMidniteStr.length - 1;
+                mEventTitleSub = mPSAMidniteStr[getLuckyNumber(0, psaLength)];
+                mIsQuickEvent = true;
+                break;
+
+            default:
+                mIsQuickEvent = false;
+                break;
+        }
+    }
+
+    public boolean isQuickEvent() {
+        return mIsQuickEvent;
+    }
+
+    public boolean isDeviceIntroCompleted() {
+        return mIsFirstTimeDone;
+    }
+
+    public String getTitle() {
+        return mEventTitle;
+    }
+
+    public String getActionTitle() {
+        return mEventTitleSub;
+    }
+
+    public String getClockExt() {
+        return mClockExt;
+    }
+
+    public String getGreetings() {
+        return mGreetings;
+    }
+
+    public OnClickListener getAction() {
+        return mEventTitleSubAction;
+    }
+
+    public int getActionIcon() {
+        return mEventSubIcon;
+    }
+
+    public int getLuckyNumber(int max) {
+        return getLuckyNumber(0, max);
+    }
+
+    public int getLuckyNumber(int min, int max) {
+        Random r = new Random();
+        return r.nextInt((max - min) + 1) + min;
+    }
+
+    public void setMediaInfo(String title, String artist, boolean clientLost, boolean activePlayback) {
+        mNowPlayingTitle = title;
+        mNowPlayingArtist = artist;
+        mClientLost = clientLost;
+        mPlayingActive = activePlayback;
+    }
+
+    public boolean isNowPlaying() {
+        return mPlayingActive;
+    }
+
+    public void onPause() {
+        mRunning = false;
+        unregisterPSAListener();
+    }
+
+    public void onResume() {
+        mRunning = true;
+        registerPSAListener();
+    }
+}
diff --git a/src/com/android/launcher3/quickspace/QuickSpaceView.java b/src/com/android/launcher3/quickspace/QuickSpaceView.java
new file mode 100644
index 0000000..9605adf
--- /dev/null
+++ b/src/com/android/launcher3/quickspace/QuickSpaceView.java
@@ -0,0 +1,296 @@
+/*
+ * Copyright (C) 2018-2023 crDroid Android Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.launcher3.quickspace;
+
+import android.animation.LayoutTransition;
+import android.animation.ValueAnimator;
+import android.animation.ValueAnimator.AnimatorUpdateListener;
+import android.content.ActivityNotFoundException;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.content.res.ColorStateList;
+import android.text.TextUtils.TruncateAt;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.android.launcher3.BubbleTextView;
+import com.android.launcher3.model.data.ItemInfo;
+import com.android.launcher3.R;
+import com.android.launcher3.Utilities;
+import com.android.launcher3.util.Themes;
+
+import com.android.launcher3.quickspace.QuickspaceController.OnDataListener;
+import com.android.launcher3.quickspace.receivers.QuickSpaceActionReceiver;
+import com.android.launcher3.quickspace.views.DateTextView;
+
+public class QuickSpaceView extends FrameLayout implements AnimatorUpdateListener, OnDataListener {
+
+    private static final String TAG = "Launcher3:QuickSpaceView";
+    private static final boolean DEBUG = false;
+
+    public final ColorStateList mColorStateList;
+    public BubbleTextView mBubbleTextView;
+    public final int mQuickspaceBackgroundRes;
+
+    public ViewGroup mQuickspaceContent;
+    public ImageView mEventSubIcon;
+    public ImageView mNowPlayingIcon;
+    public TextView mEventTitleSub;
+    public TextView mEventTitleSubColored;
+    public TextView mGreetingsExt;
+    public TextView mGreetingsExtClock;
+    public ViewGroup mWeatherContentSub;
+    public ImageView mWeatherIconSub;
+    public TextView mWeatherTempSub;
+    public TextView mEventTitle;
+
+    public boolean mIsQuickEvent;
+    public boolean mFinishedInflate;
+    public boolean mWeatherAvailable;
+    public boolean mAttached;
+
+    private QuickSpaceActionReceiver mActionReceiver;
+    public QuickspaceController mController;
+
+    public QuickSpaceView(Context context, AttributeSet set) {
+        super(context, set);
+        mActionReceiver = new QuickSpaceActionReceiver(context);
+        mController = new QuickspaceController(context);
+        mColorStateList = ColorStateList.valueOf(Themes.getAttrColor(getContext(), R.attr.workspaceTextColor));
+        mQuickspaceBackgroundRes = R.drawable.bg_quickspace;
+        setClipChildren(false);
+    }
+
+    @Override
+    public void onDataUpdated() {
+        boolean altUI = Utilities.useAlternativeQuickspaceUI(getContext());
+        mController.getEventController().initQuickEvents();
+        mIsQuickEvent = mController.isQuickEvent();
+        if (mEventTitle == null || (altUI && mGreetingsExt == null)) {
+            prepareLayout(altUI);
+        }
+        mWeatherAvailable = mController.isWeatherAvailable() &&
+                mController.getEventController().isDeviceIntroCompleted();
+        loadDoubleLine(altUI);
+    }
+
+    private final void loadDoubleLine(boolean useAlternativeQuickspaceUI) {
+        setBackgroundResource(mQuickspaceBackgroundRes);
+        mEventTitle.setText(mController.getEventController().getTitle());
+        if (useAlternativeQuickspaceUI) {
+            if (!mController.getEventController().getGreetings().isEmpty()) {
+                mGreetingsExt.setVisibility(View.VISIBLE);
+                mGreetingsExt.setText(mController.getEventController().getGreetings());
+                mGreetingsExt.setEllipsize(TruncateAt.END);
+                mGreetingsExt.setOnClickListener(mController.getEventController().getAction());
+            } else {
+                mGreetingsExt.setVisibility(View.GONE);
+            }
+            if (!mController.getEventController().getClockExt().isEmpty()) {
+                mGreetingsExtClock.setVisibility(View.VISIBLE);
+                mGreetingsExtClock.setText(mController.getEventController().getClockExt());
+                mGreetingsExtClock.setOnClickListener(mController.getEventController().getAction());
+            } else {
+                mGreetingsExtClock.setVisibility(View.GONE);
+            }
+        }
+        if (mIsQuickEvent && (Utilities.isQuickspacePersonalityEnabled(getContext()) ||
+                        mController.getEventController().isNowPlaying())) {
+            mEventTitle.setEllipsize(TruncateAt.MARQUEE);
+            mEventTitle.setMarqueeRepeatLimit(3);
+            mEventTitle.setSelected(true);
+            mEventTitle.setOnClickListener(mController.getEventController().getAction());
+            mEventTitleSub.setVisibility(View.VISIBLE);
+            mEventTitleSub.setText(mController.getEventController().getActionTitle());
+            mEventTitleSub.setEllipsize(TruncateAt.MARQUEE);
+            mEventTitleSub.setMarqueeRepeatLimit(3);
+            mEventTitleSub.setSelected(true);
+            mEventTitleSub.setOnClickListener(mController.getEventController().getAction());
+            if (useAlternativeQuickspaceUI) {
+                if (mController.getEventController().isNowPlaying()) {
+                    mEventSubIcon.setVisibility(View.GONE);
+                    mEventTitleSubColored.setVisibility(View.VISIBLE);
+                    mNowPlayingIcon.setVisibility(View.VISIBLE);
+                    mNowPlayingIcon.setOnClickListener(mController.getEventController().getAction());
+                    mEventTitleSubColored.setText(getContext().getString(R.string.qe_now_playing_by));
+                    mEventTitleSubColored.setOnClickListener(mController.getEventController().getAction());
+                } else {
+                    setEventSubIcon();
+                    mEventTitleSubColored.setText("");
+                    mEventTitleSubColored.setVisibility(View.GONE);
+                    mNowPlayingIcon.setVisibility(View.GONE);
+                }
+            } else {
+                setEventSubIcon();
+            }
+        } else {
+            mEventTitleSub.setVisibility(View.GONE);
+            mEventSubIcon.setVisibility(View.GONE);
+            if (useAlternativeQuickspaceUI) {
+                mEventTitleSubColored.setVisibility(View.GONE);
+                mNowPlayingIcon.setVisibility(View.GONE);
+            }
+        }
+        bindWeather(mWeatherContentSub, mWeatherTempSub, mWeatherIconSub);
+    }
+
+    private void setEventSubIcon() {
+        int icon = mController.getEventController().getActionIcon();
+        if (icon > 0) {
+            mEventSubIcon.setVisibility(View.VISIBLE);
+            mEventSubIcon.setImageTintList(mColorStateList);
+            mEventSubIcon.setImageResource(mController.getEventController().getActionIcon());
+            mEventSubIcon.setOnClickListener(mController.getEventController().getAction());
+        } else {
+            mEventSubIcon.setVisibility(View.GONE);
+        }
+    }
+
+    private final void bindWeather(View container, TextView title, ImageView icon) {
+        if (!mWeatherAvailable || mController.getEventController().isNowPlaying()) {
+            container.setVisibility(View.GONE);
+            return;
+        }
+        String weatherTemp = mController.getWeatherTemp();
+        if (weatherTemp == null || weatherTemp.isEmpty()) {
+            container.setVisibility(View.GONE);
+            return;
+        }
+        boolean hasGoogleApp = isPackageEnabled("com.google.android.googlequicksearchbox", getContext());
+        container.setVisibility(View.VISIBLE);
+        container.setOnClickListener(hasGoogleApp ? mActionReceiver.getWeatherAction() : null);
+        title.setText(weatherTemp);
+        icon.setImageDrawable(mController.getWeatherIcon());
+    }
+
+    private final void loadViews() {
+        mEventTitle = (TextView) findViewById(R.id.quick_event_title);
+        mEventTitleSub = (TextView) findViewById(R.id.quick_event_title_sub);
+        mEventTitleSubColored = (TextView) findViewById(R.id.quick_event_title_sub_colored);
+        mNowPlayingIcon = (ImageView) findViewById(R.id.now_playing_icon_sub);
+        mEventSubIcon = (ImageView) findViewById(R.id.quick_event_icon_sub);
+        mWeatherIconSub = (ImageView) findViewById(R.id.quick_event_weather_icon);
+        mQuickspaceContent = (ViewGroup) findViewById(R.id.quickspace_content);
+        mWeatherContentSub = (ViewGroup) findViewById(R.id.quick_event_weather_content);
+        mWeatherTempSub = (TextView) findViewById(R.id.quick_event_weather_temp);
+        if (Utilities.useAlternativeQuickspaceUI(getContext())) {
+            mGreetingsExtClock = (TextView) findViewById(R.id.extended_greetings_clock);
+            mGreetingsExt = (TextView) findViewById(R.id.extended_greetings);
+        }
+    }
+
+    private void prepareLayout(boolean useAlternativeQuickspaceUI) {
+        int indexOfChild = indexOfChild(mQuickspaceContent);
+        removeView(mQuickspaceContent);
+        if (useAlternativeQuickspaceUI) {
+            addView(LayoutInflater.from(getContext()).inflate(R.layout.quickspace_alternate_double, this, false), indexOfChild);
+        } else {
+            addView(LayoutInflater.from(getContext()).inflate(R.layout.quickspace_doubleline, this, false), indexOfChild);
+        }
+
+        loadViews();
+        getQuickSpaceView();
+    }
+
+    private void getQuickSpaceView() {
+        if (mQuickspaceContent.getVisibility() != View.VISIBLE) {
+        	mQuickspaceContent.setVisibility(View.VISIBLE);
+            mQuickspaceContent.setAlpha(0.0f);
+            mQuickspaceContent.animate().setDuration(200).alpha(1.0f);
+        }
+    }
+
+    @Override
+    public void onAnimationUpdate(ValueAnimator valueAnimator) {
+        invalidate();
+    }
+
+    @Override
+    public void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        if (mAttached)
+            return;
+
+        mAttached = true;
+        if (mController != null && mFinishedInflate) {
+            mController.addListener(this);
+        }
+    }
+
+    @Override
+    public void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (!mAttached)
+            return;
+
+        mAttached = false;
+        if (mController != null) {
+            mController.removeListener(this);
+        }
+    }
+
+    public boolean isPackageEnabled(String pkgName, Context context) {
+        try {
+            return context.getPackageManager().getApplicationInfo(pkgName, 0).enabled;
+        } catch (PackageManager.NameNotFoundException e) {
+            return false;
+        }
+    }
+
+    @Override
+    public void onFinishInflate() {
+        super.onFinishInflate();
+        loadViews();
+        mFinishedInflate = true;
+        mBubbleTextView = findViewById(R.id.dummyBubbleTextView);
+        mBubbleTextView.setTag(new ItemInfo() {
+            @Override
+            public ComponentName getTargetComponent() {
+                return new ComponentName(getContext(), "");
+            }
+        });
+        mBubbleTextView.setContentDescription("");
+        if (isAttachedToWindow()) {
+            if (mController != null) {
+                mController.addListener(this);
+            }
+        }
+    }
+
+    @Override
+    public void onLayout(boolean b, int n, int n2, int n3, int n4) {
+        super.onLayout(b, n, n2, n3, n4);
+    }
+
+    public void onPause() {
+        mController.onPause();
+    }
+
+    public void onResume() {
+        mController.onResume();
+    }
+
+    public void setPadding(int n, int n2, int n3, int n4) {
+        super.setPadding(0, 0, 0, 0);
+    }
+
+}
diff --git a/src/com/android/launcher3/quickspace/QuickspaceController.java b/src/com/android/launcher3/quickspace/QuickspaceController.java
new file mode 100644
index 0000000..99944b5
--- /dev/null
+++ b/src/com/android/launcher3/quickspace/QuickspaceController.java
@@ -0,0 +1,295 @@
+/*
+ * Copyright (C) 2018 CypherOS
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.launcher3.quickspace;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.Icon;
+import android.media.AudioManager;
+import android.media.MediaMetadataRetriever;
+import android.media.RemoteControlClient;
+import android.media.RemoteController;
+import android.os.Handler;
+import android.service.notification.StatusBarNotification;
+import android.util.Log;
+
+import com.android.internal.util.derp.OmniJawsClient;
+
+import com.android.launcher3.R;
+import com.android.launcher3.Utilities;
+import com.android.launcher3.notification.NotificationKeyData;
+import com.android.launcher3.notification.NotificationListener;
+import com.android.launcher3.util.PackageUserKey;
+
+import java.util.ArrayList;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ExecutorService;
+import java.util.List;
+
+public class QuickspaceController implements NotificationListener.NotificationsChangedListener, OmniJawsClient.OmniJawsObserver {
+
+    public final ArrayList<OnDataListener> mListeners = new ArrayList();
+    private static final String SETTING_WEATHER_LOCKSCREEN_UNIT = "weather_lockscreen_unit";
+    private static final boolean DEBUG = false;
+    private static final String TAG = "Launcher3:QuickspaceController";
+
+    private final Context mContext;
+    private final Handler mHandler;
+    private QuickEventsController mEventsController;
+    private OmniJawsClient mWeatherClient;
+    private OmniJawsClient.WeatherInfo mWeatherInfo;
+    private Drawable mConditionImage;
+
+    private boolean mUseImperialUnit;
+
+    private AudioManager mAudioManager;
+    private Metadata mMetadata = new Metadata();
+    private RemoteController mRemoteController;
+    private boolean mClientLost = true;
+    private boolean mMediaActive = false;
+    private ExecutorService executorService = Executors.newSingleThreadExecutor();
+
+    public interface OnDataListener {
+        void onDataUpdated();
+    }
+
+    public QuickspaceController(Context context) {
+        mContext = context;
+        mHandler = new Handler();
+        mEventsController = new QuickEventsController(context);
+        mWeatherClient = new OmniJawsClient(context);
+        mRemoteController = new RemoteController(context, mRCClientUpdateListener);
+        mAudioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
+        mAudioManager.registerRemoteController(mRemoteController);
+    }
+
+    private void addWeatherProvider() {
+        if (!Utilities.isQuickspaceWeather(mContext)) return;
+        mWeatherClient.addObserver(this);
+        queryAndUpdateWeather();
+    }
+
+    public void addListener(OnDataListener listener) {
+        mListeners.add(listener);
+        addWeatherProvider();
+        listener.onDataUpdated();
+    }
+
+    public void removeListener(OnDataListener listener) {
+        if (mWeatherClient != null) {
+            mWeatherClient.removeObserver(this);
+        }
+        mListeners.remove(listener);
+    }
+
+    public boolean isQuickEvent() {
+        return mEventsController.isQuickEvent();
+    }
+
+    public QuickEventsController getEventController() {
+        return mEventsController;
+    }
+
+    public boolean isWeatherAvailable() {
+        return mWeatherClient != null && mWeatherClient.isOmniJawsEnabled();
+    }
+
+    public Drawable getWeatherIcon() {
+        return mConditionImage;
+    }
+
+    public String getWeatherTemp() {
+        boolean shouldShowCity = Utilities.QuickSpaceShowCity(mContext);
+        boolean showWeatherText = Utilities.QuickSpaceShowWeatherText(mContext);
+        if (mWeatherInfo != null) {
+            String formattedCondition = mWeatherInfo.condition;
+            if (formattedCondition.toLowerCase().contains("clouds")) {
+                formattedCondition = mContext.getResources().getString(R.string.quick_event_weather_clouds);
+            } else if (formattedCondition.toLowerCase().contains("rain")) {
+                formattedCondition = mContext.getResources().getString(R.string.quick_event_weather_rain);
+            } else if (formattedCondition.toLowerCase().contains("clear")) {
+                formattedCondition = mContext.getResources().getString(R.string.quick_event_weather_clear);
+            } else if (formattedCondition.toLowerCase().contains("storm")) {
+                formattedCondition = mContext.getResources().getString(R.string.quick_event_weather_storm);
+            } else if (formattedCondition.toLowerCase().contains("snow")) {
+                formattedCondition = mContext.getResources().getString(R.string.quick_event_weather_snow);
+            } else if (formattedCondition.toLowerCase().contains("wind")) {
+                formattedCondition = mContext.getResources().getString(R.string.quick_event_weather_wind);
+            } else if (formattedCondition.toLowerCase().contains("mist")) {
+                formattedCondition = mContext.getResources().getString(R.string.quick_event_weather_mist);
+            }
+            String weatherTemp = (shouldShowCity ? mWeatherInfo.city : "") + " " + mWeatherInfo.temp +
+                    mWeatherInfo.tempUnits  + (showWeatherText ? " · "  + formattedCondition : "");
+            return weatherTemp;
+        }
+        return null;
+    }
+
+    private void playbackStateUpdate(int state) {
+        boolean active;
+        switch (state) {
+            case RemoteControlClient.PLAYSTATE_PLAYING:
+                active = true;
+                break;
+            case RemoteControlClient.PLAYSTATE_ERROR:
+            case RemoteControlClient.PLAYSTATE_PAUSED:
+            default:
+                active = false;
+                break;
+        }
+        if (active != mMediaActive) {
+            mMediaActive = active;
+        }
+        updateMediaInfo();
+    }
+
+    public void updateMediaInfo() {
+        if (mEventsController != null) {
+            mEventsController.setMediaInfo(mMetadata.trackTitle, mMetadata.trackArtist, mClientLost, mMediaActive);
+            mEventsController.updateQuickEvents();
+            notifyListeners();
+        }
+    }
+
+    @Override
+    public void onNotificationPosted(PackageUserKey postedPackageUserKey,
+                                     NotificationKeyData notificationKey) {
+        updateMediaInfo();
+    }
+
+    @Override
+    public void onNotificationRemoved(PackageUserKey removedPackageUserKey,
+                                      NotificationKeyData notificationKey) {
+        updateMediaInfo();
+    }
+
+    @Override
+    public void onNotificationFullRefresh(List<StatusBarNotification> activeNotifications) {
+        updateMediaInfo();
+    }
+
+    public void onPause() {
+        if (mEventsController != null) mEventsController.onPause();
+    }
+
+    public void onResume() {
+        if (mEventsController != null) {
+            updateMediaInfo();
+            mEventsController.onResume();
+            notifyListeners();
+        }
+    }
+
+    @Override
+    public void weatherUpdated() {
+        queryAndUpdateWeather();
+    }
+
+    @Override
+    public void weatherError(int errorReason) {
+        Log.d(TAG, "weatherError " + errorReason);
+        if (errorReason == OmniJawsClient.EXTRA_ERROR_DISABLED) {
+            mWeatherInfo = null;
+            notifyListeners();
+        }
+    }
+
+    @Override
+    public void updateSettings() {
+        Log.i(TAG, "updateSettings");
+        queryAndUpdateWeather();
+    }
+
+    private void queryAndUpdateWeather() {
+        executorService.execute(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    mWeatherClient.queryWeather();
+                    mWeatherInfo = mWeatherClient.getWeatherInfo();
+                    if (mWeatherInfo != null) {
+                        mConditionImage = mWeatherClient.getWeatherConditionImage(mWeatherInfo.conditionCode);
+                    }
+                    notifyListeners();
+                } catch(Exception e) {
+                    // Do nothing
+                }
+            }
+        });
+    }
+
+    public void notifyListeners() {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                for (OnDataListener list : mListeners) {
+                    list.onDataUpdated();
+                }
+            }
+        });
+    }
+
+   private RemoteController.OnClientUpdateListener mRCClientUpdateListener =
+            new RemoteController.OnClientUpdateListener() {
+
+        @Override
+        public void onClientChange(boolean clearing) {
+            if (clearing) {
+                mMetadata.clear();
+                mMediaActive = false;
+                mClientLost = true;
+            }
+            updateMediaInfo();
+        }
+
+        @Override
+        public void onClientPlaybackStateUpdate(int state, long stateChangeTimeMs,
+                long currentPosMs, float speed) {
+            mClientLost = false;
+            playbackStateUpdate(state);
+        }
+
+        @Override
+        public void onClientPlaybackStateUpdate(int state) {
+            mClientLost = false;
+            playbackStateUpdate(state);
+        }
+
+        @Override
+        public void onClientMetadataUpdate(RemoteController.MetadataEditor data) {
+            mMetadata.trackTitle = data.getString(MediaMetadataRetriever.METADATA_KEY_TITLE,
+                    mMetadata.trackTitle);
+            mMetadata.trackArtist = data.getString(MediaMetadataRetriever.METADATA_KEY_ARTIST,
+                    mMetadata.trackArtist);
+            mClientLost = false;
+            updateMediaInfo();
+        }
+
+        @Override
+        public void onClientTransportControlUpdate(int transportControlFlags) {
+        }
+    };
+
+    class Metadata {
+        private String trackTitle;
+        private String trackArtist;
+
+         public void clear() {
+            trackTitle = null;
+            trackArtist = null;
+        }
+    }
+}
diff --git a/src/com/android/launcher3/quickspace/receivers/QuickSpaceActionReceiver.java b/src/com/android/launcher3/quickspace/receivers/QuickSpaceActionReceiver.java
new file mode 100644
index 0000000..e67645a
--- /dev/null
+++ b/src/com/android/launcher3/quickspace/receivers/QuickSpaceActionReceiver.java
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2018-2023 crDroid Android Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.launcher3.quickspace.receivers;
+
+import android.content.ActivityNotFoundException;
+import android.content.ComponentName;
+import android.content.ContentUris;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.LauncherApps;
+import android.net.Uri;
+import android.os.Process;
+import android.os.UserHandle;
+import android.provider.CalendarContract;
+import android.view.View;
+import android.view.View.OnClickListener;
+
+import com.android.launcher3.Launcher;
+import com.android.launcher3.LauncherAppState;
+import com.android.launcher3.R;
+import com.android.launcher3.Utilities;
+
+public class QuickSpaceActionReceiver {
+
+    private static Context mContext;
+    private final LauncherApps mLauncherApps;
+
+    public OnClickListener mCalendarClickListener;
+    public OnClickListener mWeatherClickListener;
+
+    public QuickSpaceActionReceiver(Context context) {
+        mContext = context;
+        mLauncherApps = context.getSystemService(LauncherApps.class);
+
+        mCalendarClickListener = new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                openGoogleCalendar(view);
+            }
+        };
+
+        mWeatherClickListener = new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                openGoogleWeather(view);
+            }
+        };
+    }
+
+    private void openGoogleCalendar(View view) {
+        final Uri content_URI = CalendarContract.CONTENT_URI;
+        final Uri.Builder appendPath = content_URI.buildUpon().appendPath("time");
+        ContentUris.appendId(appendPath, System.currentTimeMillis());
+        final Intent addFlags = new Intent(Intent.ACTION_VIEW)
+                .setData(appendPath.build())
+                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
+        try {
+            Launcher.getLauncher(mContext).startActivitySafely(view, addFlags, null);
+        } catch (ActivityNotFoundException ex) {
+            mLauncherApps.startAppDetailsActivity(new ComponentName("com.google.android.googlequicksearchbox", ""), Process.myUserHandle(), null, null);
+        }
+    }
+
+    private void openGoogleWeather(View view) {
+        Intent intent = new Intent("android.intent.action.VIEW");
+        intent.setData(Uri.parse("dynact://velour/weather/ProxyActivity"));
+        intent.setComponent(new ComponentName("com.google.android.googlequicksearchbox", "com.google.android.apps.gsa.velour.DynamicActivityTrampoline"));
+        try {
+            Launcher.getLauncher(mContext).startActivitySafely(view, intent, null);
+        } catch (ActivityNotFoundException ex) {
+            mLauncherApps.startAppDetailsActivity(new ComponentName("com.google.android.googlequicksearchbox",
+                    "com.google.android.apps.gsa.velour.DynamicActivityTrampoline"), Process.myUserHandle(), null, null);
+        }
+    }
+
+    public OnClickListener getCalendarAction() {
+        return mCalendarClickListener;
+    }
+
+    public OnClickListener getWeatherAction() {
+        return mWeatherClickListener;
+    }
+}
diff --git a/src/com/android/launcher3/quickspace/views/DateTextView.java b/src/com/android/launcher3/quickspace/views/DateTextView.java
new file mode 100644
index 0000000..015ce71
--- /dev/null
+++ b/src/com/android/launcher3/quickspace/views/DateTextView.java
@@ -0,0 +1,94 @@
+/*
+ * Copyright (C) 2018-2023 crDroid Android Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.launcher3.quickspace.views;
+
+import android.annotation.TargetApi;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.icu.text.DateFormat;
+import android.icu.text.DisplayContext;
+import android.text.format.DateUtils;
+import android.util.AttributeSet;
+
+import com.android.launcher3.R;
+import com.android.launcher3.Utilities;
+
+import java.util.Locale;
+
+public class DateTextView extends DoubleShadowTextView {
+
+    private DateFormat mDateFormat;
+    private final BroadcastReceiver mTimeChangeReceiver;
+    private boolean mIsVisible = false;
+
+    public DateTextView(final Context context) {
+        this(context, null);
+    }
+
+    public DateTextView(final Context context, final AttributeSet set) {
+        super(context, set, 0);
+        mTimeChangeReceiver = new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                reloadDateFormat(!Intent.ACTION_TIME_TICK.equals(intent.getAction()));
+            }
+        };
+    }
+
+    public void reloadDateFormat(boolean forcedChange) {
+        String format;
+        if (mDateFormat == null || forcedChange) {
+            String styleText;
+            Context context = getContext();
+            if (Utilities.useAlternativeQuickspaceUI(context)) {
+                styleText = context.getString(R.string.quickspace_date_format_minimalistic);
+            } else {
+                styleText = context.getString(R.string.quickspace_date_format);
+            }
+            mDateFormat = DateFormat.getInstanceForSkeleton(styleText, Locale.getDefault());
+            mDateFormat.setContext(DisplayContext.CAPITALIZATION_FOR_STANDALONE);
+        }
+        format = mDateFormat.format(System.currentTimeMillis());
+        setText(format);
+        setContentDescription(format);
+    }
+
+    private void registerReceiver() {
+        IntentFilter intentFilter = new IntentFilter();
+        intentFilter.addAction(Intent.ACTION_TIME_TICK);
+        intentFilter.addAction(Intent.ACTION_TIME_CHANGED);
+        intentFilter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
+        getContext().registerReceiver(mTimeChangeReceiver, intentFilter, Context.RECEIVER_NOT_EXPORTED);
+    }
+
+    private void unregisterReceiver() {
+        getContext().unregisterReceiver(mTimeChangeReceiver);
+    }
+
+    public void onVisibilityAggregated(boolean isVisible) {
+        super.onVisibilityAggregated(isVisible);
+        if (!mIsVisible && isVisible) {
+            mIsVisible = true;
+            registerReceiver();
+            reloadDateFormat(true);
+        } else if (mIsVisible && !isVisible) {
+            unregisterReceiver();
+            mIsVisible = false;
+        }
+    }
+}
diff --git a/src/com/android/launcher3/quickspace/views/DoubleShadowTextView.java b/src/com/android/launcher3/quickspace/views/DoubleShadowTextView.java
new file mode 100644
index 0000000..1bf019f
--- /dev/null
+++ b/src/com/android/launcher3/quickspace/views/DoubleShadowTextView.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2018-2023 crDroid Android Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.launcher3.quickspace.views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.util.AttributeSet;
+import android.widget.TextView;
+
+import com.android.launcher3.views.DoubleShadowBubbleTextView;
+
+public class DoubleShadowTextView extends TextView {
+
+    private final DoubleShadowBubbleTextView.ShadowInfo mShadowInfo;
+
+    public DoubleShadowTextView(Context context) {
+        this(context, null);
+    }
+
+    public DoubleShadowTextView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public DoubleShadowTextView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        mShadowInfo = new DoubleShadowBubbleTextView.ShadowInfo(context, attrs, defStyleAttr);
+        setShadowLayer(Math.max(mShadowInfo.keyShadowBlur + mShadowInfo.keyShadowOffsetX, mShadowInfo.ambientShadowBlur), 0f, 0f, mShadowInfo.keyShadowColor);
+    }
+
+    protected void onDraw(Canvas canvas) {
+        if (mShadowInfo.skipDoubleShadow(this)) {
+            super.onDraw(canvas);
+            return;
+        }
+        getPaint().setShadowLayer(mShadowInfo.ambientShadowBlur, 0.0f, 0.0f, mShadowInfo.ambientShadowColor);
+        super.onDraw(canvas);
+        getPaint().setShadowLayer(mShadowInfo.keyShadowBlur, 0.0f, mShadowInfo.keyShadowOffsetX, mShadowInfo.keyShadowColor);
+        super.onDraw(canvas);
+    }
+}
diff --git a/src/com/android/launcher3/settings/SettingsActivity.java b/src/com/android/launcher3/settings/SettingsActivity.java
index e2ad63a..28a55cf 100644
--- a/src/com/android/launcher3/settings/SettingsActivity.java
+++ b/src/com/android/launcher3/settings/SettingsActivity.java
@@ -72,6 +72,8 @@ import com.android.launcher3.util.DisplayController;

 import com.android.settingslib.collapsingtoolbar.CollapsingToolbarBaseActivity;

+import com.android.internal.util.derp.OmniJawsClient;
+
 import java.util.Collections;
 import java.util.List;

@@ -159,6 +161,11 @@ public class SettingsActivity extends CollapsingToolbarBaseActivity
         switch (key) {
             case KEY_DOCK_SEARCH:
             case KEY_SMARTSPACE:
+            case Utilities.DESKTOP_SHOW_QUICKSPACE:
+            case Utilities.KEY_SHOW_ALT_QUICKSPACE:
+            case Utilities.KEY_SHOW_QUICKSPACE_NOWPLAYING:
+            case Utilities.KEY_SHOW_QUICKSPACE_WEATHER:
+            case Utilities.KEY_SHOW_QUICKSPACE_PSONALITY:
                 LauncherAppState.getInstanceNoCreate().setNeedsRestart();
                 break;
             default:
@@ -218,6 +225,9 @@ public class SettingsActivity extends CollapsingToolbarBaseActivity
         private PreferenceGroup mDeveloperOptionPrefGroup;
         private Preference mIconPackPref;
         private Preference mThemeAllAppsIconsPref;
+        private Preference mWeatherPref;
+
+        private OmniJawsClient mWeatherClient;

         @Override
         public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
@@ -261,6 +271,13 @@ public class SettingsActivity extends CollapsingToolbarBaseActivity
                 }
             }

+            mWeatherClient = new OmniJawsClient(getContext());
+            mWeatherPref = screen.findPreference(Utilities.KEY_SHOW_QUICKSPACE_WEATHER);
+            if (!mWeatherClient.isOmniJawsEnabled()) {
+                mWeatherPref.setEnabled(false);
+                mWeatherPref.setSummary(R.string.quick_event_ambient_weather_enabled_info);
+            }
+
             if (getActivity() != null && !TextUtils.isEmpty(getPreferenceScreen().getTitle())) {
                 if (getPreferenceScreen().getTitle().equals(
                         getResources().getString(R.string.search_pref_screen_title))){
--
2.25.1

